Версия базы данных: postgreSQL 9.3.5.
Разработана упрощённая база данных для хранения картографических данных, представленных на сайте openstreetmap.org. Имеются следующие сущности:
* Nodes — узлы. Каждый узел имеет числовой индентификатор, номер версии, координаты, время добавления/последнего изменения.
* Ways — пути. Каждый путь имеет числовой индентификатор, номер версии, время добавления/последнего изменения. Также путь содержит список узлов (порядок важен).
* Relations — отношения. Каждое отношение имеет числовой индентификатор, номер версии, время добавления/последнего изменения. Отношение состоит из множества путей и узлов, каждый из которых имеет некоторую роль в этом отношении.
* Tags — тэги. Примеры тэгов: «name», «transport». Каждый представленный выше объект может иметь произвольное множество тэгов. Для каждого тэга в составе объекта определено его значение (например, название объекта, тип транспорта).
* Users — пользователи. Каждому объекту соответствует пользователь, добавивший/модифицировавший этот объект.
Подробное описание представлено в виде ERM-диаграммы (ERM.svg). По ERM-диаграмме прямым преобразованием построена соответствующая физическая модель (PDM.svg).
Также проверяются некоторые другие ограничения, не описываемые ERM-диаграммой:
* ограничения значений координат;
* в отношении должно быть не меньше двух элементов;
* при изменении объекта его version и timestamp должны увеличиваться;
* индексы объектов в пути должны быть последовательными, два одинаковых объекта не могут идти подряд.
Для последних трёх ограничений написаны соответствующие триггеры.
Представления:
* TagValuesCount. Сбор статистики по количеству значений тэгов.
* SubwayStations, Fuels, PrimaryHighways. Идентификаторы станций метро, АЗС, крупных дорог. По сути, данную базу данных можно использовать в разных целях. Ценность этих представлений зависит от реальных задач. Например, для приложения, информирующего об АЗС будет полезно представление Fuels.
* NamedSubwayStations, NamedFuels, NamedPrimaryHighways. Аналогичные материализованные представления. Для представлений, хранящих точки, создан пространственный индекс, позволяющий, например, быстро находить ближайшие станции метро (пример имеется рядом). Опять же ценность таких представлений зависит от реального использования. Материализованы они потому, что занимают немного места, и обновляются довольно редко. Опять же реальная польза зависит от приложения, так что эти представления созданы скорее для демонстрации возможностей. Также стоит отметить, что для каких-то задач может быть полезно не только имя, но и значение другого тэга.
* UserContribution. Сколько всего полезного сделал каждый пользователь.
* TagsCount. Сколько информации известно про объект.
Индексы:
* упомянутые выше индексы на точки в материализованных представлениях;
* индексы на ключи генерируются в PostgreSQL автоматически;
* индексы для таблиц с тэгами на идентификатор объекта (для соединений), на ключ и значения тэга (в основном для фильтрации);
* индексы для таблиц, связывающих объекты (для соединений).

С помощью команды EXPLAIN можно видеть, что индексы действительно используются. Примеры (на данных по Санкт-Петербургу):
1.
EXPLAIN SELECT NamedSubwayStations.coordinates, NamedSubwayStations.name FROM NamedSubwayStations ORDER BY NamedSubwayStations.coordinates <-> '60, 30.1' :: point LIMIT 10;
QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
Limit  (cost=0.14..1.46 rows=10 width=48)
  ->  Index Scan using subwaystationsindex on namedsubwaystations  (cost=0.14..9.56 rows=71 width=48)
           Order By: (coordinates <-> '(60,30.1)'::point)

2.
EXPLAIN SELECT Nodes.node_id FROM Nodes INNER JOIN NodeTags USING (node_id) WHERE NodeTags.tag_key = 'amenity' AND NodeTags.tag_value = 'fuel';
QUERY PLAN                                       
----------------------------------------------------------------------------------------
Nested Loop  (cost=4.93..54.50 rows=1 width=8)
   ->  Bitmap Heap Scan on nodetags  (cost=4.50..46.04 rows=1 width=8)
            Recheck Cond: (tag_value = 'fuel'::text)
                     Filter: (tag_key = 'amenity'::text)
                              ->  Bitmap Index Scan on nodetagsvalueindex  (cost=0.00..4.50 rows=11 width=0)
                                             Index Cond: (tag_value = 'fuel'::text)
                                                ->  Index Only Scan using nodes_pkey on nodes  (cost=0.43..8.45 rows=1 width=8)
                                                         Index Cond: (node_id = nodetags.node_id)

